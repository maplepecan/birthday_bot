
import random
import telebot
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "7750170218:AAF4ZV2KH13KhQ1k7JfzlD9jXsbSsNdVnYk"  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_CHAT_ID = "5962742623"  # –í–∞—à ID –≤ Telegram (–º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot)
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('unique_numbers.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        random_number INTEGER UNIQUE,
        registration_date TEXT,
        last_request_date TEXT
    )
    ''')

    cursor.execute('CREATE INDEX IF NOT EXISTS idx_number ON users(random_number)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_user ON users(user_id)')

    conn.commit()
    return conn

db_conn = init_db()

def generate_unique_number():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ"""
    while True:
        num = random.randint(1, 10000)
        cursor = db_conn.cursor()
        cursor.execute('SELECT 1 FROM users WHERE random_number = ?', (num,))
        if not cursor.fetchone():
            return num

def get_user_number(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∏—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    cursor = db_conn.cursor()
    cursor.execute(
        'SELECT random_number, registration_date FROM users WHERE user_id = ?',
        (user_id,)
    )
    return cursor.fetchone()

def notify_admin(user_info, number):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    message = (
        "üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
        f"üë§ –ò–º—è: {user_info['first_name']}\n"
        f"üîñ –ù–∏–∫–Ω–µ–π–º: @{user_info['username']}\n"
        f"üÜî ID: {user_info['user_id']}\n"
        f"üî¢ –í—ã–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {number}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    bot.send_message(ADMIN_CHAT_ID, message)

@bot.message_handler(commands=['start', '—á–∏—Å–ª–æ', 'number'])
def handle_start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç_–Ω–∏–∫–Ω–µ–π–º–∞"
    first_name = message.from_user.first_name or "–ê–Ω–æ–Ω–∏–º"
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    existing_data = get_user_number(user_id)

    if existing_data:
        number, reg_date = existing_data
        response = (
            f"–≠–≠–≠–≠ —Ç—É–æ—Ö –¥—å–∏–≥–∏–Ω –¥—ç—ç—ç! (‡∏áÔ∏°'-'Ô∏†)‡∏á –ù–µ –∂—É–ª—å–Ω–∏—á–∞–π, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –±–∏–ª–µ—Ç–∏–∫!\n\n"
            f"–¢–≤–æ–π –±–∏–ª–µ—Ç–∏–∫: {number}\n"
        )
    else:
        try:
            number = generate_unique_number()
            cursor = db_conn.cursor()
            cursor.execute(
                '''
                INSERT INTO users 
                (user_id, username, first_name, random_number, registration_date, last_request_date) 
                VALUES (?, ?, ?, ?, ?, ?)
                ''',
                (user_id, username, first_name, number, current_time, current_time)
            )
            db_conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            notify_admin({
                'user_id': user_id,
                'username': username,
                'first_name': first_name
            }, number)

            response = (
                f"( Õ°¬∞ Õú„Å§ Õ°¬∞) –î–∞—Ä–æ–≤–∞, {first_name}!\n\n"
                f"–¢–≤–æ–π –±–∏–ª–µ—Ç–∏–∫: {number}\n\n"
                "–ì–æ–≤–æ—Ä—é —Å—Ä–∞–∑—É: –ø–æ–≤—Ç–æ—Ä–Ω–æ –±–∏–ª–µ—Ç–∏–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ –≤—ã–π–¥–µ—Ç, —Ç–∞–∫ —à–æ –∑–∞–ø–æ–º–∏–Ω–∞–π!"
            )
        except sqlite3.IntegrityError:
            response = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            db_conn.rollback()

    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    help_text = (
        "–ß–µ–≥–æ? –ù–µ –ø–æ–Ω—è–ª. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç–∏–∫ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à, –≤–≤–µ–¥–∏ /start\n"
    )
    bot.send_message(message.chat.id, help_text)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        bot.infinity_polling()
    finally:
        db_conn.close()